//Just for Explanation:
// consider a plain containing points ( starting or ending) 
// each point may be starting or ending
// traverse from i=0 to i=n-1 
// if you find a starting point PlatformCount++, else PlatformCount-- , keep track of max PlatformCount reached
// simple approach with O(n) space:
// vector<pair<int,char>>v ; 
// {3,'s'} , {5,'s'},{7,'e'},{10,'e'}; //sorted
//                  s-----------------------e
//           s----------------------e   s------------e
//  s---------------------e
// now see we only check which point comes earlier , start or end , if start do count++, else do count--;
// so sort each array ( arr, dep) individually , make 2 pointer ai, di for each array and compare arr[ai] with dep[di], see which is smaller
// if arr[ai] is smaller do count++ else do count--, keep track of maximum count achieved.



// sort arrays individually doesnt matter which train comes earlier or later.
 
 //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	//  ans = max no of overlaps of timings
    	// consider time on x axis and see from starting to end 
    	sort(arr,arr+n);
    	sort(dep,dep+n);
    	int i=1,j=0;    // i for starting time and  j for ending time 
    	int mx=1,platforms=1;
    	while(i<n&&j<n){
    	    if(arr[i]<=dep[j]){
    	        platforms++;
    	        i++;
    	    }
    	    else if(arr[i]>dep[j]) {
    	        platforms--;
    	      j++;}
    	    mx=max(mx,platforms);
    	}
    	return mx;
    }
